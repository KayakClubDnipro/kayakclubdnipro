from datetime import datetime

from django.utils import timezone
from django.db import models
from django.core.exceptions import ValidationError
from .constants import BOAT_TYPES
перший варіант моделей


class BoatType(models.Model):
    type_name = models.CharField(
        max_length=25,
        choices=[(bt['name'], bt['name']) for bt in BOAT_TYPES],
        default='',
        unique=True
    )
    quantity = models.PositiveIntegerField(default=1)

    def __str__(self):
        return self.type_name

    @staticmethod
    def get_default_type_name():
        default_boat_type = BoatType.objects.first()
        if default_boat_type:
            return default_boat_type.type_name
        return 'SPIER1'

    def save(self, *args, **kwargs):
        if not self.type_name:
            self.type_name = self.get_default_type_name()
        super().save(*args, **kwargs)


class Boat(models.Model):
    boat_type = models.ForeignKey(BoatType, on_delete=models.CASCADE, null=True, default=BoatType.objects.first())
    boat_index = models.PositiveIntegerField(default=1)

    STATUS_CHOICES = [
        ('F', 'Вільний'),
        ('C', 'В обробці'),
        ('B', 'Зайнятий'),
         ]
    status = models.CharField(max_length=1, default="F", choices=STATUS_CHOICES)

    def __str__(self):
        return f"{self.boat_type.type_name} - {self.boat_index} ({self.get_status_display()})"


class BoatStatus(models.Model):
    STATUS_CHOICES = [
        ('F', 'Вільний'),
        ('C', 'В обробці'),
        ('B', 'Зайнятий'),
    ]

    boat = models.ForeignKey(Boat, on_delete=models.CASCADE)
    start_time = models.DateTimeField(default=datetime(2022, 2, 24, 4, 0), null=True, blank=True)
    end_time = models.DateTimeField(default=datetime(2022, 2, 24, 6, 0), null=True, blank=True)
    status = models.CharField(default='F', max_length=1, choices=STATUS_CHOICES)


    def __str__(self):
        return f"{self.boat} - {self.get_status_display()} ({self.start_time} - {self.end_time})"
    # def save(self, *args, **kwargs):
    #     if not self.start_time:
    #         self.start_time = timezone.now()
    #     if not self.end_time:
    #         self.end_time = timezone.now()
    #     super().save(*args, **kwargs)


class Price(models.Model):
    DURATION_CHOICES = [
        ('30m', '30 minutes'),
        ('1h', '1 hour'),
        ('2h', '2 hours'),
        ('3h', '3 hours'),
        ('4h', '4 hours'),
        ('5h', '5 hours'),
        ('5-7h', '5-7 hours'),
        ('7-12h', '7-12 hours'),
        ('24h', '24 hours'),
    ]

    boat_type = models.ForeignKey(BoatType, on_delete=models.CASCADE, default=BoatType.objects.first())
    duration = models.CharField(max_length=5, choices=DURATION_CHOICES)
    price_per_hour = models.DecimalField(max_digits=8, decimal_places=2)

    def __str__(self):
        return f"{self.duration} - Price: {self.price_per_hour} UAH"


class Booking(models.Model):
    CLIENT = 'Client'
    MANAGER = 'Manager'
    ADMIN = 'Admin'
    USER_TYPE_CHOICES = [
        (CLIENT, 'Client'),
        (MANAGER, 'Manager'),
        (ADMIN, 'Admin'),
    ]

    DISCOUNT_CHOICES = [
        ('DR', 'DR'),
        ('SOU', 'SOU'),
        ('Volunteer', 'Volunteer'),
        ('Refugee', 'Refugee'),
    ]

    boat_status = models.ForeignKey(BoatStatus, null=True, on_delete=models.CASCADE)
    start_time = models.DateTimeField(default=datetime(2022, 2, 24, 4, 0), null=True, blank=True)

    # def save(self, *args, **kwargs):
    #     if not self.start_date:
    #         self.start_date = timezone.now().date()
    #     super().save(*args, **kwargs)
    duration = models.PositiveIntegerField(null=True, blank=True)
    boat_type = models.ForeignKey(BoatType, on_delete=models.CASCADE, default=BoatType.objects.first())

    def get_rental_price(self):
        price = Price.objects.get(boat_type=self.boat_status.boat.boat_type, duration=self.duration)
        return price.price_per_hour * self.duration

    rental_price = property(get_rental_price)

    discount = models.CharField(max_length=10, choices=DISCOUNT_CHOICES, blank=True, null=True)
    is_first_time_booking = models.BooleanField(default=True)
    earned_pz_count = models.PositiveIntegerField(blank=True, null=True)
    special_conditions = models.TextField(blank=True, null=True)

    def clean(self):
        # Перевірка наявності вільної лодки для бронювання
        if self.boat_status.status != 'F':
            raise ValidationError('This boat is not available for booking.')

        # Перевірка статусів лодок на весь період оренди
        booking_start = self.start_date
        booking_end = self.start_date + timezone.timedelta(hours=self.duration)
        conflicting_bookings = Booking.objects.filter(
            boat_status__boat__boat_type=self.boat_status.boat.boat_type,
            start_date__lt=booking_end,
            start_date__gte=booking_start
        ).exclude(pk=self.pk)

        if conflicting_bookings.exists():
            raise ValidationError('There is a conflict with the booking period of this boat.')

    def calculate_total_price(self):
        price = Price.objects.get(boat_type=self.boat_status.boat.boat_type, duration=self.duration)
        total_price = price.price_per_hour * self.duration
        if self.discount == 'DR':
            total_price -= total_price * 0.1
        elif self.discount == 'SOU':
            total_price -= price.price_per_hour
        elif self.discount == 'Volunteer' or self.discount == 'Refugee':
            discount_amount = min(total_price * 0.5, price.price_per_hour * 2)
            total_price -= discount_amount
        return total_price
